--
-----
----- Generated by EmmyLua(https://github.com/EmmyLua)
----- Created by Administrator.
----- DateTime: 2018/11/29 0029 上午 11:03
-----
-----
--[[
a=0

if a>0 then
    print(1)
elseif a~=0then
else
    print(2)
end
--]]
--[[
--repeat
--    print(a)
--    a=a+1
--until a>10
--
--while a<10 do
--    a=a+1
--    print(a)
--end
--]]
--[[
--for i = 1, 10,4 do--起始 结束 步数
--    print(i)
--end
--]]

--[[
--mayTable={}
--b={1,2,3,4,5,6}
--print(#b)
--c={[1]=1,[2]=2,[4]=3}
--print(#c)
--]]

--[[
mayTable={[1]='a',[2]='b',[3]='c',[5]='e',[6]='f'}
for i, v in ipairs(mayTable) do--遍历数组
print(i,v)
end
for i, v in pairs(mayTable) do--遍历字典
    print(i,v)
end
--]]
--[[
mayTable={4,5,3,7,1,2}
s=' '
for i = 1, #mayTable do
    for j = i+1, #mayTable do
        if mayTable[i]>mayTable[j] then
            temp=mayTable[i]
            mayTable[i]=mayTable[j]
            mayTable[j]=temp
        end
    end
end
for i, v in ipairs(mayTable) do
    print(v)
end
--]]
--[[
function SumNum(num1,num2)
    return num1+num2
end

sum =SumNum(1,2)
print(sum)

function maximum()
    local mi=1--函数中定义变量最好加local
    local m=a[mi]
    for i, v in ipairs(a) do
        mi=i
        m=v
    end
    return m,mi
end
print(maximum({8,9,23,12,5}))

SumNum=function(num1,num2)
    return num1+num2
end
sum=SumNum(1,2)
print(sum)


mayTable={SumNum}


mytable={}
mymetable={}
setmetatable(mytable,mymetable)
mytable=setmetatable({},{})
getmetatable(mytable)
Account={balance=0}
function Account.withdraw(v)
    Account.balance=Account.balance -v
end
Account.withdraw(100.00)
Meta class
Shape={area=0}
--]]
--[[
基础类方法 new
function Shape:new(o,side)
    o=o or {}
    setmetatable(o,self)
    self.__index=self
    side=side or 0
    self.area=side*side
    return 0
end

基础类方法 printArea
function Shape:printArea()
    print("面积为",self.area)
end
创建对象
myshape=Shape:new(nil,10)
myshape:printArea()
a='sadaefef'
print(string.upper(a))
print(string.gsub(a,'ef','ab',2))

s='hello world from lua'
for i in string.gmatch(s,'%a+')do
    print(i)
end
--]]
--[[
local strs={}
for i = 1, 30000,1 do
    strs[i]='helloworld'
end;

local result=''
local startTime=os.clock();
for index,str in ipairs(strs)do;
    result=result..str
end
local endTime=os.clock()
local useTime=endTime-startTime
print('消耗时间'..useTime..'s')

local strs={}
for i=1,3000000,1 do
    strs[i]='helloworld'
end
local result=''
local startTime=os.clock()
result=table.concat(strs)
local endTime=os.clock()
local useTime=endTime-startTime
print('消耗时间'..useTime..'s')

--]]
--[[
local startTime=os.clock();
for i = 1, 100000 do
    local a={}
    a[1]=1
    a[2]=2
    a[3]=3
end
local endTime=os.clock()
local useTime=endTime-startTime
print('消耗时间'..useTime..'s')

local startTime=os.clock()
for i = 1, 100000 do
    local a={true,true,true}--避免重复开辟多余空间
    a[1]=1
    a[2]=2
    a[3]=3
end
local endTime=os.clock()
local useTime=endTime-startTime
print('消耗时间'..useTime..'s')
--]]

--[[
function printResult (a)
    for i = 1, #a do
        io.write(a[i], " ")
    end
    io.write("\n")
end
function Permute(a,k)
    local len = #a
    if(len == k) then
        printResult(a)
    else
        for i=k, len do
            a[i], a[k] = a[k], a[i]--赋值 交换 如x,y=y,x
            Permute(a,k+1)
            a[i], a[k] = a[k], a[i]--恢复原来的顺序
        end
    end
end

arr = {"a", "b", "c"}
Permute(arr,1)
--]]--排序第一题


--[[
array={1,34,44,54,66,77,688,788,9999}
function search(a,v)
    local left=1
    local right=#a
    local mid=math.ceil((right+left)/2)
    while left~=mid do
        if a[mid]==v then
            break
        else if a[mid]<v then
            left=mid+1
        else
            right=mid-1

        end
            mid=math.ceil((right+left)/2)
        end

    end
    return mid,a[mid]
end
print(search(array,788))
--]]--二分查找